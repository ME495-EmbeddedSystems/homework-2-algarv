#!/usr/bin/env python

## ARM_MARKER NODE ##
'''
The arm_marker node uses a tf listener to find the x position of the end effector and publish a marker. The
marker is colored according to the sign of the x value, eg. a green sphere for positive and a red cube for negative.

Publishers:
    Name: /visualization_marker Type: visualization_msgs/Marker ~ Publishes color-coded markers at the end effector position

Listeners:
    Name: tf Type:f2_msgs/TFMessage ~ Recieves the transform between the base to end effector from the robot state publisher

Parameters: 
    Name: T File: arm.yaml ~ Period of arm movement cycle
'''

import rospy
import tf2_ros
import geometry_msgs.msg
from visualization_msgs.msg import Marker

def main():
    '''
    Publishes green sphere or red cube markers at the end effector position using the transform found with the listener. 
    '''
    T = rospy.get_param("T")
    r = rospy.Rate(15)
    i=0
    pub = rospy.Publisher('visualization_marker', Marker, queue_size=10)
    buffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(buffer)
    while not rospy.is_shutdown():
        
        try:
            trans = buffer.lookup_transform("base", "end", rospy.Time())
        except: 
            continue

        x = trans.transform.translation.x

        marker = Marker()
        marker.header.frame_id = 'end'
        marker.header.stamp = rospy.Time.now() 
        marker.id = i
        marker.lifetime = rospy.Duration(T/5)
        marker.action = Marker.ADD 
        marker.scale.x = .10
        marker.scale.y = .10
        marker.scale.z = .10

        if x > 0:
            marker.type = Marker.SPHERE

            marker.color.r = 0.0
            marker.color.g = 0.75
            marker.color.b = 0.25
            marker.color.a = 1.0

        else:
            marker.type = Marker.CUBE

            marker.color.r = 0.75
            marker.color.g = 0.0
            marker.color.b = 0.25
            marker.color.a = 1.0
        
        marker.pose.position.x = 0
        marker.pose.position.y = 0
        marker.pose.position.z = 0
        
        marker.pose.orientation.x = 0.0
        marker.pose.orientation.y = 0.0
        marker.pose.orientation.z = 0.0
        marker.pose.orientation.w = 1.0
        
        pub.publish(marker)
        
        i += 1
        r.sleep()

if __name__ == '__main__':
    rospy.init_node('arm_marker') 
    main()
    rospy.spin()


